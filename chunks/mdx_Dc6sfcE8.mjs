const id = "mdx.mdx";
						const collection = "blog";
						const slug = "mdx";
						const body = "\n## 举栗子: \n\n<div className=\"note\">\n  > 如何快速使用 mdx\n</div>\n\n```mdx\n<div className=\"note\">\n  > 如何快速使用 mdx\n</div>\n``` \n如此方便使用 引用\n\n## syntax \n\n* 对于强调或标题等常见内容\n\n> A blockquote with *some* emphasis.\n\n```\n> A blockquote with *some* emphasis.\n```\n\n* 支持默认标准\n\n# Heading (rank 1)\n## Heading 2\n### 3\n#### 4\n##### 5\n###### 6\n\n> Block quote\n\n* Unordered\n* List\n\n1. Ordered\n2. List\n\nA paragraph, introducing a thematic break:\n\n\n\n```md\n# Heading (rank 1)\n## Heading 2\n### 3\n#### 4\n##### 5\n###### 6\n\n> Block quote\n\n* Unordered\n* List\n\n1. Ordered\n2. List\n\nA paragraph, introducing a thematic break:\n\n```\n\n\n\n\n#### 为了更方便的缩进组件 \n\n<main>\n  <article>\n    # Hello!\n  </article>\n</main>\n\n```\n<main>\n  <article>\n    # Hello!\n  </article>\n</main>\n```\n\n关于自动链接和注释 \n\n1. 在 **JSX** 中 列如:`<svg:rect>` 是这样使用的,而 **MDX** 喜欢用更完整的链接 `[descriptive text](https://and-the-link-here.com)` 其实就是md 的链接\n\n2. 在 **HTML** 中 列如: ` （<img> 到 <img /> ）` 可以使用 Js 的 **注释来代替** HTML 注释 `{/* comment! */}` \n\n3. 未转义的 `(<)` 和 `({}` , 必须用 正则表达式中的 `\\<` 或 `\\{` 来表示 或使用表达: `'<}'` , `'{'}`\n\n\n### JSX \n\nJSX 是 JavaScript 的扩展，看起来像 **HTML**，但可以方便地使用组件（可重用的东西）。 JSX 通常与 React、Preact 或 Vue 等前端框架结合使用。这些框架添加了对组件的支持，使您可以更改重复的内容，例如以下标记：\n\n\n```\n<h2>Hello, Venus!</h2>\n<h2>Hello, Mars!</h2> \n```\n到 MDX 如下所示: \n\n```\n<Welcome name=\"Venus\" />\n<Welcome name=\"Mars\" />\n```\n\nJSX **适合组件** 使重复的事情变得更加清晰 允许关注点分离 MDX 支持 JSX 语法 如下所示: \n\n```\n<h1>Heading!</h1>\n\n<abbr title=\"HyperText Markup Language\">HTML</abbr> is a lovely language.\n\n<section>\n  And here is *markdown* in **JSX**!\n</section>\n```\n\n但正如前面提到的 可以使用组件 \n\n**注意**: 必须定义组件。您可以导入它们、在本地定义它们或稍后传递它们\n\n```\n<MyComponent id=\"123\" />\n\nYou can also use objects with components, such as the `thisOne` component on\nthe `myComponents` object: <myComponents.thisOne />\n\n<Component\n  open\n  x={1}\n  label={'this is a string, *not* markdown!'}\n  icon={<Icon />}\n/>\n```\n\n在一些边缘的地方与JSX 是不一样的 \n\n## Expressions \n\nMDX 还支持 大括号 内的 JavaScript 表达式: \n\n``` MDX\nTwo 🍰 is: {Math.PI * 2}\n```\n\n可渲染内容的表达式中即可 也可以像这样使用:\n\n```mdx\n{(function () {\n  const guess = Math.random()\n\n  if (guess > 0.66) {\n    return <span style={{color: 'tomato'}}>Look at us.</span>\n  }\n\n  if (guess > 0.33) {\n    return <span style={{color: 'violet'}}>Who would have guessed?!</span>\n  }\n\n  return <span style={{color: 'goldenrod'}}>Not me.</span>\n})()}\n```\n\n可以为空或仅包含注释：`{/* A comment! */}` \n\n### ESM \n\n还支持 JavaScript 中的 **import 和 export**  语句。这些 ESM 功能可在 MDX 中使用来定义事物：\n\n```mdx\nimport {External} from './some/place.js'\n\nexport const Local = properties => <span style={{color: 'red'}} {...properties} />\n\nAn <External>external</External> component and a <Local>local one</Local>.\n```\n\n也可用于非组件（数据）: \n\n```mdx\nimport {Chart} from './chart.js'\nimport population from './population.js'\nexport const pi = 3.14\n\n<Chart data={population} label={'Something with ' + pi} />\n```\n";
						const data = {title:"学习 MDX",description:"mdx 如何使用",pubDate:new Date(1719072000000),heroImage:"/blog-placeholder-2.jpg"};
						const _internal = {
							type: 'content',
							filePath: "/Users/bujack/Desktop/Jack/funny/blue-bar/ab/src/content/blog/mdx.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
